<templateSet group="John.kotlin">
  <template name="ksc" value="/**&#10; * $CLASS_NAME$&#10; * &#10; * @author $USER$&#10; */" description="kotlin source comments" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="USER" expression="user()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="mvvm adapter" value="class ToneAdapter(&#10;    private var data: List&lt;Tone&gt;,&#10;    private var cellClickListener: CellClickListener&lt;Tone&gt;&#10;) : RecyclerView.Adapter&lt;ToneViewHolder&gt;() {&#10;&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ToneViewHolder {&#10;        val binding = &lt;TBD&gt;.&lt;TBD&gt;&#10;        return &lt;TBD&gt;&#10;    }&#10;&#10;    override fun getItemCount(): Int {&#10;        return &lt;TBD&gt;.&lt;TBD&gt;&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ToneViewHolder, position: Int) {&#10;        &lt;TBD&gt;.&lt;TBD&gt;&#10;    }&#10;&#10;}&#10;&#10;class ToneViewHolder(private var binding: ItemLayoutBinding) :&#10;    RecyclerView.ViewHolder(&lt;TBD&gt;.&lt;TBD&gt;) {&#10;&#10;    fun bind(tone: Tone, cellClickListener: CellClickListener&lt;Tone&gt;) {&#10;        &lt;TBD&gt;.&lt;TBD&gt;.&lt;TBD&gt; = &lt;TBD&gt;.&lt;TBD&gt;&#10;        &lt;TBD&gt;.&lt;TBD&gt;.&lt;TBD&gt; = &lt;TBD&gt;.&lt;TBD&gt;&#10;        &lt;TBD&gt;.&lt;TBD&gt;.&lt;TBD&gt;&#10;    }&#10;}&#10;&#10;interface CellClickListener&lt;T&gt; {&#10;    fun onCellClick(data: T)&#10;}" description="mvvm adapter" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="bf" value="private var _binding: $Binding$? = null&#10;private val binding get() = _binding!!&#10;&#10;override fun onCreateView(&#10;    inflater: LayoutInflater,&#10;    container: ViewGroup?,&#10;    savedInstanceState: Bundle?&#10;): View {&#10;    _binding = $Binding$.inflate(inflater, container, false)&#10;    return binding.root&#10;}&#10;&#10;override fun onDestroyView() {&#10;    _binding = null&#10;    super.onDestroyView()&#10;}" description="create binding for fragment" toReformat="false" toShortenFQNames="true">
    <variable name="Binding" expression="complete()" defaultValue="ViewBinding" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="ba" value="private lateinit var binding: $Binding$&#10;&#10;override fun onCreate(savedInstanceState: Bundle?){&#10;    super.onCreate(savedInstanceState)&#10;    binding = $Binding$.inflate(layoutInflater)&#10;    setContentView(binding.root)&#10;}" description="create binding for activity" toReformat="false" toShortenFQNames="true">
    <variable name="Binding" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_STATEMENT" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="immersive" value="private fun hideSystemUi() {&#10;    val controller = WindowCompat.getInsetsController(window, window.decorView)&#10;    controller.hide(WindowInsetsCompat.Type.systemBars())&#10;}&#10;&#10;private fun hideSystemUiBeforeAPI30() {&#10;    window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;            or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;            or View.SYSTEM_UI_FLAG_FULLSCREEN)&#10;}&#10;&#10;private fun hideSystemUiAfterAPI30() {&#10;    val controller = window.decorView.windowInsetsController&#10;    // 设置状态栏反色&#10;    controller?.setSystemBarsAppearance(APPEARANCE_LIGHT_STATUS_BARS, APPEARANCE_LIGHT_STATUS_BARS)&#10;    // 取消状态栏反色&#10;    controller?.setSystemBarsAppearance(0, APPEARANCE_LIGHT_STATUS_BARS)&#10;    // 设置导航栏反色&#10;    controller?.setSystemBarsAppearance(APPEARANCE_LIGHT_NAVIGATION_BARS, APPEARANCE_LIGHT_NAVIGATION_BARS)&#10;    // 取消导航栏反色&#10;    controller?.setSystemBarsAppearance(0, APPEARANCE_LIGHT_NAVIGATION_BARS)&#10;    // 同时设置状态栏和导航栏反色&#10;    controller?.setSystemBarsAppearance((APPEARANCE_LIGHT_STATUS_BARS or APPEARANCE_LIGHT_NAVIGATION_BARS),&#10;        (APPEARANCE_LIGHT_STATUS_BARS or APPEARANCE_LIGHT_NAVIGATION_BARS))&#10;    // 同时取消状态栏和导航栏反色&#10;    controller?.setSystemBarsAppearance(0, (APPEARANCE_LIGHT_STATUS_BARS or APPEARANCE_LIGHT_NAVIGATION_BARS))&#10;    // 隐藏状态栏&#10;    controller?.hide(WindowInsets.Type.statusBars())&#10;    // 显示状态栏&#10;    controller?.show(WindowInsets.Type.statusBars())&#10;    // 隐藏导航栏&#10;    controller?.hide(WindowInsets.Type.navigationBars())&#10;    // 显示导航栏&#10;    controller?.show(WindowInsets.Type.navigationBars())&#10;    // 同时隐藏状态栏和导航栏&#10;    controller?.hide(WindowInsets.Type.systemBars())&#10;    // 同时隐藏状态栏和导航栏&#10;    controller?.show(WindowInsets.Type.systemBars())&#10;}" description="android immersive implementation" toReformat="false" toShortenFQNames="true" />
</templateSet>